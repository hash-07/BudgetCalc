{"version":3,"sources":["Components/ExpenseForm.js","Components/ExpenseItem.js","Components/ExpenseList.js","Components/Alert.js","App.js","serviceWorker.js","index.js"],"names":["ExpenseForm","charge","amount","handleCharge","handleAmount","handleSubmit","edit","onSubmit","className","htmlFor","type","id","name","placeholder","value","onChange","ExpenseItem","expense","handleDelete","handleEdit","aria-label","onClick","ExpenseList","expenses","clearItems","map","key","length","Alert","text","initialExpenses","localStorage","getItem","JSON","parse","App","useState","setExpenses","setCharge","setAmount","show","alert","setAlert","setEdit","setId","useEffect","console","log","setItem","stringify","handleAlert","setTimeout","e","target","preventDefault","temExp","item","singleExpense","uuid","DeleteExp","filter","find","window","confirm","reduce","prev","current","parseInt","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f1a89597.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { MdSend } from \"react-icons/md\";\r\n\r\nexport const ExpenseForm = ({\r\n charge,\r\n amount,\r\n handleCharge,\r\n handleAmount,\r\n handleSubmit,\r\n edit\r\n}) => {\r\n return (\r\n  <form onSubmit={handleSubmit}>\r\n   <div className=\"form-center\">\r\n    <div className=\"form-group\">\r\n     <label htmlFor=\"charge\">Charge</label>\r\n     <input\r\n      type=\"text\"\r\n      className=\"form-control\"\r\n      id=\"charge\"\r\n      name=\"charge\"\r\n      placeholder=\"e.g rent\"\r\n      value={charge}\r\n      onChange={handleCharge}\r\n     />\r\n    </div>\r\n\r\n    <div className=\"form-group\">\r\n     <label htmlFor=\"amount\">amount</label>\r\n     <input\r\n      type=\"number\"\r\n      className=\"form-control\"\r\n      id=\"amount\"\r\n      name=\"amount\"\r\n      placeholder=\"e.g ₹1000\"\r\n      value={amount}\r\n      onChange={handleAmount}\r\n     />\r\n    </div>\r\n   </div>\r\n   <button type=\"submit\" className=\"btn\">\r\n    {edit? \"edit\" : \"Submit\"}\r\n    <MdSend className=\"btn-icon\" />\r\n   </button>\r\n  </form>\r\n );\r\n};\r\n\r\nexport default ExpenseForm;\r\n","import React from \"react\";\r\nimport { MdDelete, MdEdit } from \"react-icons/md\";\r\n\r\nconst ExpenseItem = ({ expense, handleDelete, handleEdit }) => {\r\n const { id, charge, amount } = expense;\r\n\r\n return (\r\n  <>\r\n   <h1> from expense Item</h1>\r\n   <li className=\"item\">\r\n    <div className=\"info\">\r\n     <span className=\"expenses\">{charge}</span>\r\n     <span className=\"amount\">₹{amount}</span>\r\n    </div>\r\n\r\n    <button\r\n     className=\"edit-btn\"\r\n     aria-label=\"edit button\"\r\n     onClick={() => handleEdit(id)}\r\n    >\r\n     <MdEdit />\r\n    </button>\r\n\r\n    <button\r\n     className=\"clear-btn\"\r\n     aria-label=\"delete button\"\r\n     onClick={() => handleDelete(id)}\r\n    >\r\n     <MdDelete />\r\n    </button>\r\n   </li>\r\n  </>\r\n );\r\n};\r\n\r\nexport default ExpenseItem;\r\n","import React from \"react\";\r\nimport ExpenseItem from \"./ExpenseItem\";\r\nimport { MdDelete } from \"react-icons/md\";\r\n\r\nconst ExpenseList = ({\r\n id,\r\n expenses,\r\n handleEdit,\r\n handleDelete,\r\n clearItems,\r\n}) => {\r\n return (\r\n  <>\r\n   <ul className=\"list\">\r\n    {expenses.map((expense) => {\r\n     return (\r\n      <ExpenseItem\r\n       key={expense.id}\r\n       expense={expense}\r\n       handleDelete={handleDelete}\r\n       handleEdit={handleEdit}\r\n    \r\n      />\r\n     );\r\n    })}\r\n   </ul>\r\n\r\n   {expenses.length > 0 && (\r\n    <button className=\"btn\" onClick={clearItems}>\r\n     Clear Expenses\r\n     <MdDelete className=\"btn-icon\" />\r\n    </button>\r\n   )}\r\n  </>\r\n );\r\n};\r\n\r\nexport default ExpenseList;\r\n","import React from \"react\";\r\n\r\nconst Alert = ({ type, text }) => {\r\n return <div className={`alert alert-${type}`}>{text}</div>;\r\n \r\n};\r\n\r\nexport default Alert;\r\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport ExpenseForm from \"./Components/ExpenseForm\";\nimport ExpenseList from \"./Components/ExpenseList\";\nimport Alert from \"./Components/Alert\";\nimport { v4 as uuid } from \"uuid\";\n\n// const initialExpenses = [\n//  { id: uuid(), charge: \"rent\", amount: 1600 },\n//  { id: uuid(), charge: \"car payment\", amount: 1700 },\n//  { id: uuid(), charge: \"credit bill\", amount: 1800 },\n// ];\n\nconst initialExpenses = localStorage.getItem(\"expenses\")\n ? JSON.parse(localStorage.getItem(\"expenses\"))\n : [];\n\nfunction App() {\n //******************state values*************************\n const [expenses, setExpenses] = useState(initialExpenses);\n\n const [charge, setCharge] = useState(\"\");\n\n const [amount, setAmount] = useState(\"\");\n\n const [alert, setAlert] = useState({ show: false });\n\n const [edit, setEdit] = useState(false);\n\n const [id, setId] = useState(0);\n\n //*************************useEffect*************************** */\n useEffect(() => {\n  console.log(\"called useEffect\");\n  localStorage.setItem(\"expenses\", JSON.stringify(expenses));\n }, [expenses]);\n //*****************functionality******************************\n\n const handleCharge = (e) => {\n  setCharge(e.target.value);\n };\n\n const handleAmount = (e) => {\n  setAmount(e.target.value);\n };\n\n const handleAlert = ({ type, text }) => {\n  setAlert({ show: true, type, text });\n  setTimeout(() => {\n   setAlert({ show: false });\n  }, 3000);\n };\n\n const handleSubmit = (e) => {\n  e.preventDefault();\n\n  if (charge !== \"\" && amount > 0) {\n   if (edit) {\n    let temExp = expenses.map((item) => {\n     return item.id === id ? { ...item, charge, amount } : item;\n    });\n    setExpenses(temExp);\n    setEdit(false);\n   } else {\n    const singleExpense = { id: uuid(), charge, amount };\n    setExpenses([...expenses, singleExpense]);\n    handleAlert({ type: \" success \", text: \"item added\" });\n   }\n   setCharge(\"\");\n   setAmount(\"\");\n  } else {\n   handleAlert({\n    type: \"danger\",\n    text: \"Charge can't be empty & amount value has to be greater than zero\",\n   });\n  }\n };\n\n // clear all items\n const clearItems = () => {\n  const r = window.confirm(\n   \"Do you really want to clear all items? (Action can't be undone)\"\n  );\n\n  if (r === true) {\n   setExpenses([]);\n  }\n\n  handleAlert({ type: \"danger\", text: \"all items deleted\" });\n };\n\n // handle delete\n const handleDelete = (id) => {\n  let DeleteExp = expenses.filter((item) => item.id !== id);\n  setExpenses(DeleteExp);\n  console.log(DeleteExp);\n\n  handleAlert({ type: \"danger\", text: \"item deleted\" });\n };\n\n // handle edit\n const handleEdit = (id) => {\n  let expense = expenses.find((item) => item.id === id);\n  console.log(expense);\n  console.log(expenses);\n  console.log(id);\n  let { charge, amount } = expense;\n  setCharge(charge);\n  setAmount(amount);\n  setEdit(true);\n  setId(id);\n };\n\n return (\n  <>\n   {alert.show && <Alert type={alert.type} text={alert.text} />}\n   <Alert />\n   <h1>Budget Calculator</h1>\n   <main className=\"App\">\n    <ExpenseForm\n     charge={charge}\n     amount={amount}\n     handleAmount={handleAmount}\n     handleCharge={handleCharge}\n     handleSubmit={handleSubmit}\n     edit={edit}\n    />\n    <ExpenseList\n     expenses={expenses}\n     handleDelete={handleDelete}\n     handleEdit={handleEdit}\n     clearItems={clearItems}\n    />\n   </main>\n   <h1>\n    Total Spending\n    <span className=\"total\">\n     {expenses.reduce((prev, current) => {\n      return (prev = prev + parseInt(current.amount));\n     }, 0)}\n    </span>\n   </h1>\n  </>\n );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}